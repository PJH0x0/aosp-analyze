@startuml
interface Call {
    Request request()
    Response execute()
    void enqueue(Callback responseCallback)
    void cancel()
    boolean isExecuted()
    boolean isCanceled()
    Timeout timeout()
}
interface Call.Factory {
    Call newCall(Request request)
}
class OkHttpClient {
    Dispatcher dispatcher;
    Proxy proxy;
    List<Protocol> protocols;
    List<ConnectionSpec> connectionSpecs;
    List<Interceptor> interceptors;
    List<Interceptor> networkInterceptors;
    EventListener.Factory eventListenerFactory;
    ProxySelector proxySelector;
    CookieJar cookieJar;
    Cache cache;
    InternalCache internalCache;
    SocketFactory socketFactory;
    SSLSocketFactory sslSocketFactory;
    CertificateChainCleaner certificateChainCleaner;
    HostnameVerifier hostnameVerifier;
    CertificatePinner certificatePinner;
    Authenticator proxyAuthenticator;
    Authenticator authenticator;
    ConnectionPool connectionPool;
    Dns dns;
    boolean followSslRedirects;
    boolean followRedirects;
    boolean retryOnConnectionFailure;
    int callTimeout;
    int connectTimeout;
    int readTimeout;
    int writeTimeout;
    int pingInterval;
    Call newCall(Request request)
}
class RealCall {
    OkHttpClient client
    Transmitter transmitter
    Request originalRequest
    boolean forWebSocket
    boolean executed
}
Call.Factory <|.. OkHttpClient
Call <|.. RealCall
Call.Factory --> Call
class Request {
    HttpUrl url
    String method
    Headers headers
    RequestBody body
    Map<Class<?>, Object> tags
    CacheControl cacheControl
}
class Response {
    Request request
    Protocol protocol
    int code
    String message
    Handshake handshake
    Headers headers
    ResponseBody body
    Response networkResponse
    Response cacheResponse
    Response priorResponse
    long sentRequestAtMillis
    long receivedResponseAtMillis
    Exchange exchange

    CacheControl cacheControl
}
OkHttpClient --> Request
class Dispatcher {
    private int maxRequests = 64;
    int maxRequestsPerHost = 5;
    Runnable idleCallback;
    ExecutorService executorService;
    Deque<AsyncCall> readyAsyncCalls = new ArrayDeque<>();
    Deque<AsyncCall> runningAsyncCalls = new ArrayDeque<>();
    Deque<RealCall> runningSyncCalls = new ArrayDeque<>();
}
OkHttpClient o-- Dispatcher
interface Interceptor {
    Response intercept(Chain chain)
}
interface Interceptor.Chain {
    Request request()
    Response proceed(Request request)
    Connection connection()
    Call call()
    int connectTimeoutMillis()
    Chain withConnectTimeout(int timeout, TimeUnit unit)
    int readTimeoutMillis()
    Chain withReadTimeout(int timeout, TimeUnit unit)
    int writeTimeoutMillis()
    Chain withWriteTimeout(int timeout, TimeUnit unit)
}
class RealInterceptorChain {
    List<Interceptor> interceptors;
    Transmitter transmitter;
    Exchange exchange;
    int index;
    Request request;
    Call call;
    int connectTimeout;
    int readTimeout;
    int writeTimeout;
    int calls;
}
class RetryAndFollowUpInterceptor {
    OkHttpClient client
}
class BridgeInterceptor {
    CookieJar cookieJar
}
class CacheInterceptor {
    InternalCache cache
}
class ConnectInterceptor {
    OkHttpClient client
}
class CallServerInterceptor {
    boolean forWebSocket
}
Interceptor.Chain <|.. RealInterceptorChain
Interceptor <|.. RetryAndFollowUpInterceptor
Interceptor <|.. BridgeInterceptor
Interceptor <|.. CacheInterceptor
Interceptor <|.. ConnectInterceptor
Interceptor <|.. CallServerInterceptor
Interceptor --> Response
RealInterceptorChain "1" o-- "n" Interceptor
@enduml
