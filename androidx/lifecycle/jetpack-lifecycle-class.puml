@startuml
interface LifecycleObserver
interface LifecycleOwner {
    Lifecycle getLifecycle()
}
interface LifecycleEventObserver {
    void onStateChanged()
}
enum Event {
    ON_CREATE
    ON_START
    ON_RESUME
    ON_PAUSE
    ON_STOP
    ON_DESTROY
    ON_ANY
}
enum State {
    DESTROYED
    INITIALIZED
    CREATED
    STARTED
    RESUMED
}
abstract class Lifecycle {
    {abstract} void addObserver()
    {abstract} void removeObserver()
    {abstract} void State getCurrentState()
}
class LifecycleRegistry {
    FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap
    State mState
    WeakReference<LifecycleOwner> mLifecycleOwner
    boolean mHandlingEvent
    ArrayList<State> mParentStates
}
class ObserverWithState {
    State mState
    LifecycleEventObserver mLifecycleObserver
}
class ReflectiveGenericLifecycleObserver {
    Object mWrapped
    CallbackInfo mInfo
    onStateChanged()
}

class ComponentActivity
class ReportFragment
class MyLifecycleObserver

Lifecycle <|-- LifecycleRegistry
LifecycleRegistry o-- LifecycleOwner
LifecycleObserver <|-- LifecycleEventObserver
ReflectiveGenericLifecycleObserver <|.. LifecycleEventObserver
ObserverWithState o-- State
ObserverWithState o-- LifecycleEventObserver

Lifecycle +-- State
Lifecycle +-- Event
LifecycleRegistry o-- State 
Event <-- LifecycleRegistry

LifecycleOwner <|.. ComponentActivity
ComponentActivity o-- ReportFragment
ComponentActivity o-- LifecycleRegistry
LifecycleObserver <|.. MyLifecycleObserver
LifecycleRegistry "1" o-- "n" LifecycleObserver

@enduml
